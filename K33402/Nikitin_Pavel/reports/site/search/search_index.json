{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b \u043e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p>"},{"location":"lab_1/","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161","text":""},{"location":"lab_1/#_1","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.</p>"},{"location":"lab_1/#_2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":""},{"location":"lab_1/#_3","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:","text":"<ol> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1-2.3 \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432:    a. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.    b. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.    c. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438.</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f:    a. \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL.    b. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many).    c. \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic.    d. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445.    e. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438.    f. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430.</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f:    a. \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e    b. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432    c. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443    d. \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439    e. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f</li> </ol>"},{"location":"lab_1/#_4","title":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<p>https://github.com/SashaZharov/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/main/students/k33402/Alexandr_Zharov/practical_works/practical_work_1</p>"},{"location":"lab_1/#_5","title":"\u0425\u043e\u0434 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:","text":"<p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0435\u043a: fastapi sqlmodel uvicorn alembic</p> <p>\u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0448\u0430\u0433\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>app = FastAPI()\n\napp.include_router(user_router)\napp.include_router(main_router, prefix=\"/api\")\n\n\ndef create_db():\n    SQLModel.metadata.create_all(engine)\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db()\n\n\nif __name__ == '__main__':\n    uvicorn.run(app, host='localhost', port=8000, reload=True)\n</code></pre> <pre><code>eng = r'A:\\Studies\\\u0412\u0435\u0431\\ITMO_ICT_WebDevelopment_tools_2023-2024\\students\\k33402\\Alexandr_Zharov\\laboratory_work_1\\database.db'\nsqlite_url = f'sqlite:///{eng}'\nengine = create_engine(sqlite_url, echo=True)\nsession = Session(bind=engine)\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0434, \u0432 \u043d\u0438\u0445 \u0431\u0443\u0434\u0435\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c: \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0431\u0430\u043b\u0430\u043d\u0441, \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438 \u0446\u0435\u043b\u0438, \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d enum \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439</p> <pre><code>class Category(str, Enum):\n    FOOD = \"Food\"\n    TRANSPORTATION = \"Transportation\"\n    ENTERTAINMENT = \"Entertainment\"\n    SHOPPING = \"Shopping\"\n    BILLS = \"Bills\"\n    SALARY = \"Salary\"\n    SAVINGS = \"Savings\"\n    OTHER = \"Other\"\n\n\nclass TransactionsType(str, Enum):\n    INCOME = \"income\"\n    EXPENSES = \"expenses\"\n\n\nclass Target(SQLModel, table=True):\n    id: int = Field(primary_key=True)\n    category: Category = Category.OTHER\n    value: int = 0\n    balance_id: int = Field(foreign_key=\"balance.id\")\n    balance: Optional[\"Balance\"] = Relationship(back_populates=\"targets\")\n\n\nclass Transactions(SQLModel, table=True):\n    id: int = Field(primary_key=True)\n    category: Category = Category.OTHER\n    value: int = 0\n    type: TransactionsType = TransactionsType.INCOME\n    balance_id: int = Field(foreign_key=\"balance.id\")\n    balance: Optional[\"Balance\"] = Relationship(back_populates=\"transactions\")\n\n\nclass Balance(SQLModel, table=True):\n    id: int = Field(primary_key=True)\n    balance: int = 0\n    user_id: Optional[int] = Field(foreign_key=\"user.id\")\n    user: Optional[User] = Relationship(back_populates=\"balance\")\n    transactions: List[Transactions] = Relationship(back_populates=\"balance\")\n    targets: List[Target] = Relationship(back_populates=\"balance\")\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> <pre><code>class User(SQLModel, table=True):\n    id: int = Field(primary_key=True)\n    username: str = Field(index=True)\n    password: str\n    email: str\n    balance: Optional[\"Balance\"] = Relationship(back_populates=\"user\")\n    created_at: datetime.datetime = Field(default=datetime.datetime.now())\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438</p> <pre><code>user_router = APIRouter()\nauth_handler = AuthHandler()\n\n\n@user_router.post('/registration', status_code=201, tags=['users'], description='Register new user')\ndef register(user: UserInput):\n    users = select_all_users()\n    if any(x.username == user.username for x in users):\n        raise HTTPException(status_code=400, detail='Username is taken')\n    hashed_pwd = auth_handler.get_password_hash(user.password)\n    balance = Balance(balance=0)\n    u = User(username=user.username, password=hashed_pwd, email=user.email, balance=balance)\n    session.add_all([u, balance])\n    session.commit()\n\n    return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"})\n\n\n@user_router.post('/login', tags=['users'])\ndef login(user: UserLogin):\n    user_found = find_user(user.username)\n\n    if not user_found:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n    verified = auth_handler.verify_password(user.password, user_found.password)\n\n    if not verified:\n        raise HTTPException(status_code=401, detail='Invalid username and/or password')\n\n    token = auth_handler.encode_token(user_found.username)\n    return {'token': token}\n\n\n@user_router.post('/users/me', tags=['users'])\ndef get_current_user(user: User = Depends(auth_handler.get_current_user)):\n    return user.username\n</code></pre> <p></p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0438 \u0446\u0435\u043b\u0438 \u043f\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0443 </p> <p>\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 alembic </p>"},{"location":"lab_1/#_6","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e API \u0441 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 FastAPI</p>"}]}