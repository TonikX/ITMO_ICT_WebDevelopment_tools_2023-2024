{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041a33422 \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430","title":"Home"},{"location":"#33422","text":"","title":"\u041a33422 \u0410\u0440\u043d\u0430\u0443\u0442\u043e\u0432\u0430 \u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430"},{"location":"lab1/body/","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0421\u0445\u0435\u043c\u0430 \u0411\u0414: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438: models from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Date, DateTime, UniqueConstraint from sqlalchemy.orm import relationship from database import Base class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True) username = Column(String, unique=True, index=True) hashed_password = Column(String) is_active = Column(Boolean, default=True) personal_information = Column(String) travelling_skills = Column(String) personal_transport = Column(String) companion_preferences = Column(String) owned_trips = relationship('Trip', foreign_keys='Trip.initiator_id', back_populates='initiator') class Trip(Base): __tablename__ = 'trip' id = Column(Integer, primary_key=True) title = Column(String, nullable=False) description = Column(String) initiator_id = Column(Integer, ForeignKey('users.id'), nullable=False) companion_id = Column(Integer, ForeignKey('users.id')) start_date = Column(Date) expected_end_date = Column(Date) is_completed = Column(Boolean) region_id = Column(Integer, ForeignKey('region.id'), nullable=False) place_id = Column(Integer, ForeignKey('place.id')) initiator = relationship('User', foreign_keys=[initiator_id]) companion = relationship('User', foreign_keys=[companion_id]) region = relationship('Region', foreign_keys=[region_id]) place = relationship('Place', foreign_keys=[place_id]) requests = relationship('TripJoinRequest', back_populates='trip') class Region(Base): __tablename__ = 'region' id = Column(Integer, primary_key=True) name = Column(String, nullable=False) places = relationship('Place', back_populates='region') class Place(Base): __tablename__ = 'place' id = Column(Integer, primary_key=True) name = Column(String, nullable=False) region_id = Column(Integer, ForeignKey('region.id')) region = relationship('Region', back_populates='places') class Swipe(Base): __tablename__ = 'swipe' id = Column(Integer, primary_key=True) sender_id = Column(Integer, ForeignKey('users.id'), nullable=False) recipient_id = Column(Integer, ForeignKey('users.id'), nullable=False) is_right = Column(Boolean, nullable=False) __table_args__ = (UniqueConstraint('sender_id', 'recipient_id'),) class TripJoinRequest(Base): __tablename__ = 'trip_join_request' id = Column(Integer, primary_key=True) sender_id = Column(Integer, ForeignKey('users.id'), nullable=False) trip_id = Column(Integer, ForeignKey('trip.id'), nullable=False) accepted = Column(Boolean) trip = relationship('Trip', back_populates='requests') class Message(Base): __tablename__ = 'message' id = Column(Integer, primary_key=True) sender_id = Column(Integer, ForeignKey('users.id'), nullable=False) recipient_id = Column(Integer, ForeignKey('users.id'), nullable=False) content = Column(String, nullable=False) timestamp = Column(DateTime, nullable=False) \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043d\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435: database from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:12345678@localhost:5432/tripder' engine = create_engine(SQLALCHEMY_DATABASE_URL) SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) Base = declarative_base() \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: main: from __future__ import annotations from datetime import date from fastapi import Depends, FastAPI, HTTPException from sqlalchemy.orm import Session import service import models import dtos from database import SessionLocal, engine models.Base.metadata.create_all(bind=engine) app = FastAPI() # Dependency def get_db(): db = SessionLocal() try: yield db finally: db.close() @app.post('/users/', response_model=dtos.UserOutFull) def create_user(user: dtos.UserCreate, db: Session = Depends(get_db)): db_user = service.get_user_by_username(db, username=user.username) if db_user: raise HTTPException(status_code=400, detail='Username already registered') new_user = service.create_user(db=db, user=user) return service.get_user_full(db, new_user) @app.put('/users/{user_id}', response_model=dtos.UserOutFull) def update_user(user_id: int, user: dtos.UserInfo, db: Session = Depends(get_db)): user_upd = service.update_user(db, user_id, user) return service.get_user_full(db, user_upd) @app.get('/users/', response_model=list[dtos.UserOutBrief]) def read_users(db: Session = Depends(get_db)): users = service.get_users(db) return users @app.get('/users/{user_id}', response_model=dtos.UserOutFull) def read_user(user_id: int, db: Session = Depends(get_db)): db_user = service.get_user(db, user_id=user_id) if db_user is None: raise HTTPException(status_code=404, detail='User not found') return service.get_user_full(db, db_user) @app.post('/users/{user_id}/trip/', response_model=dtos.TripPlanned) def create_trip_for_user(user_id: int, trip: dtos.TripCreate, db: Session = Depends(get_db)): return service.create_user_trip(db, trip, user_id) @app.get('/trips/', response_model=list[dtos.TripPlanned]) def read_trips(db: Session = Depends(get_db)): return service.get_trips(db) @app.get('/matches/{user_id}', response_model=list[dtos.UserOutBrief]) def get_matches(user_id: int, db: Session = Depends(get_db)): return service.get_users_by_ids(db, service.get_match_list(db, user_id)) @app.post('/swipe/{user_id}') def swipe(user_id: int, recipient_id: int, is_right: bool, db: Session = Depends(get_db)): if service.check_swipe(db, user_id, recipient_id): raise HTTPException(status_code=400, detail='Swipe for this user already exists') service.swipe(db, user_id, recipient_id, is_right) return {'result': 'ok'} @app.post('/trip/{user_id}/request_join/') def request_join(user_id: int, trip_id: int, db: Session = Depends(get_db)): if trip_id in list(map(lambda request: request.id, service.get_user_requests(db, user_id))): raise HTTPException(status_code=400, detail=\"You've already sent request for this trip\") if service.get_trip(db, trip_id).initiator_id not in service.get_match_list(db, user_id): raise HTTPException(status_code=400, detail=\"You can't join this trip. It's illegal. \" \"Wherever you even got this id anyway?\") service.request_trip_join(db, user_id, trip_id) return {'result': 'ok'} @app.post('/trip/{user_id}/process_request/') def process_request(user_id: int, request_id: int, accept: bool, db: Session = Depends(get_db)): request = service.get_request(db, request_id) if request.trip.initiator_id != user_id: raise HTTPException(status_code=400, detail=\"This isn't your request, put it down on the ground slowly\") if request.accepted is not None: raise HTTPException(status_code=400, detail=\"This request is already processed\") service.process_join_request(db, request_id, accept) return {'result': 'ok'} @app.get('/search/{user_id}', response_model=dtos.UserOutFull) def search(user_id: int, region_id: int | None = None, place_id: int | None = None, departure_before: date | None = None, departure_after: date | None = None, return_before: date | None = None, return_after: date | None = None, db: Session = Depends(get_db)): if place_id and service.get_place(db, place_id).region_id != region_id: raise HTTPException(status_code=400, detail='Learn your geography mate, your destination is in another region') departure_sanity_check = departure_after and departure_before and departure_after > departure_before return_sanity_check = return_after and return_before and return_after > return_before intersect_sanity_check = return_before and departure_after and departure_after > return_before if departure_sanity_check or return_sanity_check or intersect_sanity_check: raise HTTPException(status_code=400, detail=\"Congratulations, you broke time. Don't do it again. Please.\") companion = service.find_companion(db, user_id, region_id, place_id, departure_before, departure_after, return_before, return_after) if companion: return companion else: raise HTTPException(status_code=400, detail=\"Sorry, we couldn't find you a companion with these parameters.\") dtos: from __future__ import annotations from datetime import date from pydantic import BaseModel class TripBase(BaseModel): title: str description: str | None = None region_id: int place_id: int | None = None start_date: date | None = None expected_end_date: date | None = None class TripCreate(TripBase): pass class TripPlanned(TripBase): id: int initiator_id: int companion_id: int | None class Config: orm_mode = True class TripCompleted(TripBase): id: int initiator_id: int companion_id: int class Config: orm_mode = True class UserBase(BaseModel): username: str class UserInfo(UserBase): personal_information: str | None travelling_skills: str | None personal_transport: str | None companion_preferences: str | None class UserCreate(UserInfo): password: str class UserOutFull(UserInfo): id: int is_active: bool planned_trips: list[TripPlanned] completed_trips: list[TripCompleted] class Config: orm_mode = True class UserOutBrief(UserBase): id: int is_active: bool class Config: orm_mode = True service: from __future__ import annotations from sqlalchemy.orm import Session from sqlalchemy import true, false from dtos import * from models import * def get_user(db: Session, user_id: int): return db.query(User).filter(User.id == user_id).first() def get_user_full(db: Session, user: User): user_res = UserOutFull( id=user.id, personal_information=user.personal_information, travelling_skills=user.travelling_skills, personal_transport=user.personal_transport, companion_preferences=user.companion_preferences, username=user.username, is_active=user.is_active, planned_trips=get_user_planned_trips(db, user.id), completed_trips=get_user_completed_trips(db, user.id) ) return user_res def get_user_by_username(db: Session, username: str): return db.query(User).filter(User.username == username).first() def get_users(db: Session): return db.query(User).all() def create_user(db: Session, user: UserCreate): fake_hashed_password = user.password + 'muchsecure' db_user = User( username=user.username, hashed_password=fake_hashed_password, personal_information=user.personal_information, travelling_skills=user.travelling_skills, personal_transport=user.personal_transport, companion_preferences=user.companion_preferences ) db.add(db_user) db.commit() db.refresh(db_user) return db_user def update_user(db: Session, user_id: int, user_update: UserInfo): prev_user = db.query(User).filter(User.id == user_id).first() prev_user.username = user_update.username prev_user.personal_information = user_update.personal_information prev_user.travelling_skills = user_update.travelling_skills prev_user.personal_transport = user_update.personal_transport prev_user.companion_preferences = user_update.companion_preferences db.add(prev_user) db.commit() db.refresh(prev_user) return prev_user def get_trips(db: Session): return db.query(Trip).all() def get_trip(db: Session, trip_id: int): return db.query(Trip).filter(Trip.id == trip_id).first() def get_place(db: Session, place_id: int) -> Place: return db.query(Place).get(place_id) def get_joinable_trips(db: Session, user_id: int): matches = get_match_list(db, user_id) return db.query(Trip).filter(Trip.initiator_id.in_(matches) & Trip.companion_id.is_(None) & (Trip.is_completed == false())) def create_user_trip(db: Session, trip: TripCreate, user_id: int): db_trip = Trip(**trip.dict(), initiator_id=user_id) db.add(db_trip) db.commit() db.refresh(db_trip) return db_trip def get_user_planned_trips(db: Session, user_id: int): trips = db.query(Trip).filter((Trip.initiator_id == user_id) and (Trip.is_completed == false())) return map(lambda trip: TripPlanned( id=trip.id, title=trip.title, description=trip.description, region_id=trip.region_id, place_id=trip.place_id, start_date=trip.start_date, expected_end_date=trip.expected_end_date, initiator_id=trip.initiator_id, companion_id=trip.companion_id ), trips) def get_user_completed_trips(db: Session, user_id: int): trips = db.query(Trip).filter(((Trip.initiator_id == user_id) or (Trip.companion_id == user_id)) and (Trip.is_completed == true())) return map(lambda trip: TripCompleted( id=trip.id, title=trip.title, description=trip.description, region_id=trip.region_id, place_id=trip.place_id, start_date=trip.start_date, expected_end_date=trip.expected_end_date, initiator_id=trip.initiator_id, companion_id=trip.companion_id ), trips) def get_match_list(db: Session, user_id: int): my_swipes = db.query(Swipe).filter((Swipe.sender_id == user_id) & (Swipe.is_right == true())).all() res = list(filter( lambda swipe: db.query(Swipe).filter((Swipe.recipient_id == user_id) & (Swipe.sender_id == swipe.recipient_id) & (Swipe.is_right == true())).first(), my_swipes)) return list(map(lambda swipe: swipe.recipient_id, res)) def get_white_list(db: Session, user_id: int): white_swipes = db.query(Swipe).filter((Swipe.recipient_id == user_id) & (Swipe.is_right == true())).all() return list(map(lambda swipe: swipe.sender_id, white_swipes)) def get_black_list(db: Session, user_id: int): black_swipes = db.query(Swipe).filter(Swipe.sender_id == user_id).all() return list(map(lambda swipe: swipe.recipient_id, black_swipes)) def get_users_by_ids(db: Session, user_list: list[int]): return db.query(User).filter(User.id.in_(user_list)) def swipe(db: Session, user_id: int, candidate_id: int, right: bool): db_swipe = Swipe(sender_id=user_id, recipient_id=candidate_id, is_right=right) db.add(db_swipe) db.commit() db.refresh(db_swipe) return db_swipe def check_swipe(db: Session, user_id: int, candidate_id: int): return db.query(Swipe).filter((Swipe.sender_id == user_id) & (Swipe.recipient_id == candidate_id)).first() def request_trip_join(db: Session, user_id: int, trip_id: int): db_request = TripJoinRequest(sender_id=user_id, trip_id=trip_id) db.add(db_request) db.commit() db.refresh(db_request) return db_request def get_user_requests(db: Session, user_id: int): return db.query(TripJoinRequest).filter(TripJoinRequest.sender_id == user_id).all() def get_request(db: Session, request_id: int) -> TripJoinRequest: return db.query(TripJoinRequest).get(request_id) def process_join_request(db: Session, request_id, request_accepted: bool): request = db.query(TripJoinRequest).filter(TripJoinRequest.id == request_id).first() request.accepted = request_accepted db.add(request) if request_accepted: trip = request.trip trip.companion_id = request.sender_id db.add(trip) db.commit() db.refresh(request) db.refresh(trip) else: db.commit() db.refresh(request) return request def find_companion(db: Session, user_id: int, region_id: int | None, place_id: int | None, departure_before: date | None, departure_after: date | None, return_before: date | None, return_after: date | None): black_list = get_black_list(db, user_id) filters = [] if region_id: filters.append(Trip.region_id == region_id) if place_id: filters.append(Trip.place_id == place_id) if departure_before: filters.append(Trip.start_date <= departure_before) if departure_after: filters.append(Trip.start_date >= departure_after) if return_before: filters.append(Trip.expected_end_date <= return_before) if return_after: filters.append(Trip.expected_end_date >= return_after) if filters: trip = (db.query(Trip).filter(*filters) .filter(Trip.initiator_id.not_in(black_list) & (Trip.initiator_id != user_id)).first()) if trip: return get_user_full(db, trip.initiator) else: return None else: res = db.query(User).filter(User.id.not_in(black_list) & (User.id != user_id)).first() if res: return get_user_full(db, res) else: return None","title":"Body"},{"location":"lab1/screens/","text":"\u0412\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438: GET /users/ -- \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041a\u0440\u0430\u0442\u043a\u043e. \u0418\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u043c\u044f, \u0430\u0439\u0434\u0438\u0448\u043d\u0438\u043a + \u0441\u0442\u0430\u0442\u0443\u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438. \u0411\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. /users/{user_id} -- \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0438\u043c\u0435\u043d\u0438, \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0437\u0430\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0435\u0437\u0434\u043e\u043a. \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 id \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. /trips/ -- \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043f\u043e\u0435\u0437\u0434\u043e\u043a. \u0411\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. /matches/{user_id} -- \u0432\u044b\u0432\u043e\u0434 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044d\u0442\u0447\u0435\u0439. \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 id \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. /search/{user_id} -- \u0432\u044b\u0432\u043e\u0434 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f: \u0440\u0435\u0433\u0438\u043e\u043d, \u043c\u0435\u0441\u0442\u043e, \u0434\u0430\u0442\u044b \u043f\u043e\u0435\u0437\u0434\u043a\u0438 (\u0432\u044b\u0435\u0437\u0434 \u043e\u0442-\u0434\u043e, \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u0435 \u043e\u0442-\u0434\u043e). \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 -- id \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0411\u0435\u0437 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432: \u0421 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432: \u041f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439: POST /users/ -- \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0423\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435: /users/{user_id}/trip/ -- \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0435\u0437\u0434\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b: \u0440\u0435\u0433\u0438\u043e\u043d, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e\u0435\u0437\u0434\u043a\u0438 /swipe/{user_id} -- \"\u0441\u0432\u0430\u0439\u043f\u043d\u0443\u0442\u044c\" \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \"\u0432\u043f\u0440\u0430\u0432\u043e\" (\u043e\u0434\u043e\u0431\u0440\u0438\u0442\u044c) \u0438\u043b\u0438 \"\u0432\u043b\u0435\u0432\u043e\" (\u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c). \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u0439\u0434\u0438 \u0441\u0432\u0430\u043f\u0430\u0431\u0449\u0435\u0433\u043e \u0438 \u0441\u0432\u0430\u043f\u0430\u0435\u043c\u043e\u0433\u043e. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0441\u0432\u0430\u0439\u043f: \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0439: /trip/{user_id}/request_join/ -- \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u043e\u0435\u0437\u0434\u043a\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u0435\u043d, \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \"\u043f\u043e\u0434\u0440\u0443\u0436\u0438\u043b\u0438\u0441\u044c\" (\u0441\u0432\u0430\u0439\u043f\u043d\u0443\u043b\u0438 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430 \u0432\u043f\u0440\u0430\u0432\u043e). \u0422\u0440\u0435\u0431\u0443\u0435\u0442 id \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0438 id \u043f\u043e\u0435\u0437\u0434\u043a\u0438 \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439: \u0415\u0441\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0439: \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u0447\u0443\u0434\u043e\u043c \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u0435\u0437\u0434\u043a\u0443 \u043a \u0442\u043e\u043c\u0443, \u0441 \u043a\u0435\u043c \u0435\u0449\u0435 \u043d\u0435 \u0441\u0432\u0430\u0439\u043f\u043d\u0443\u043b\u0441\u044f: /trip/{user_id}/request_join/ -- \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u0435/\u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u043e\u0435\u0437\u0434\u043a\u0435. \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 id \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438 id \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439: \u041f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0439: \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043e\u0431\u0440\u0438\u0442\u044c \u043d\u0435 \u0441\u0432\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 (\u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c): POST /users/{user_id} -- \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e","title":"Screens"},{"location":"lab2/task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. naive import time def calculate_sum(i_from, i_to): return sum(range(i_from, i_to)) if __name__ == \"__main__\": times = 10 av_time = 0 for i in range (times): start_time = time.time() result = calculate_sum(1, 1000000) end_time = time.time() av_time += end_time - start_time print(f\"Average naive execution time: {av_time / times:.4f} seconds\") threading import threading import time # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 x*x for x in range(start, end) \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e sum def calculate_sum(start, end): total = sum(x * x for x in range(start, end)) return total # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 calculate_sum \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a results \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 index def thread_worker(start, end, results, index): results[index] = calculate_sum(start, end) # print(results) def one_thread(num_threads, range_per_thread): start_time = time.time() for i in range(num_threads): start = i * range_per_thread # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0440\u0442- end = (i + 1) * range_per_thread # \u0444\u0438\u043d\u0438\u0448 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 thread = threading.Thread(target=thread_worker, args=(start, end, results, i)) threads.append(thread) thread.start() for thread in threads: thread.join() total_sum = sum(results) end_time = time.time() return total_sum, end_time - start_time if __name__ == \"__main__\": num_threads = 10 range_per_thread = 10 ** 6 // num_threads times = 10 threads = [] results = [0] * num_threads av_time = 0 for i in range(times): total_sum, timer = one_thread(num_threads, range_per_thread) av_time += timer print(f\"Threading total sum: {total_sum}\") print(f\"Average threading execution time: {av_time / times:.4f} seconds\") multiprocessing import multiprocessing import time def calculate_sum(start, end): total = sum(x * x for x in range(start, end)) return total if __name__ == \"__main__\": num_processes = 10 range_per_process = 10 ** 6 // num_processes times = 10 av_time = 0 for i in range(times): pool = multiprocessing.Pool(processes=num_processes) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 # \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u0441 \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 tasks = [(i * range_per_process, (i + 1) * range_per_process) for i in range(num_processes)] start_time = time.time() results = pool.starmap(calculate_sum, tasks) pool.close() pool.join() total_sum = sum(results) end_time = time.time() av_time = av_time + end_time - start_time print(f\"Multiprocessing total sum: {total_sum}\") print(f\"Multiprocessing execution time: {av_time / times:.4f} seconds\") asyncio import asyncio import time async def calculate_sum(start, end): total = sum(x * x for x in range(start, end)) return total async def main(): num_tasks = 10 range_per_task = 10 ** 6 // num_tasks times = 10 av_time = 0 for i in range(times): tasks = [calculate_sum(i * range_per_task, (i + 1) * range_per_task) for i in range(num_tasks)] start_time = time.time() results = await asyncio.gather(*tasks) total_sum = sum(results) end_time = time.time() av_time = av_time + end_time - start_time print(f\"Asyncio total sum: {total_sum}\") print(f\"Asyncio execution time: {av_time/times:.4f} seconds\") if __name__ == \"__main__\": asyncio.run(main()) \u0412\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u043a\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0441\u044f 10 \u0440\u0430\u0437, \u0432\u0441\u0435 \u0434\u0435\u043b\u0438\u043b\u043e\u0441\u044c \u043d\u0430 10 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432/\u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b\u043e\u0441\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. Naive Threading Multiprocessing Asyncio Average 0.0151 0.0632 0.1009 0.0640 Max 0.0159 0.0989 0.1294 0.0698 Min 0.0139 0.0583 0.0619 0.0648 \u0418 \u0442\u0443\u0442, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0435\u0441\u0435\u043b\u043e\u0435: \u043d\u0430\u0438\u0432\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0449\u0443\u0442\u0438\u043c\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c \u0447\u0442\u043e \u0431\u044b \u0442\u043e \u043d\u0438 \u0431\u044b\u043b\u043e (\u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432/\u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432). \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e\u0431 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0442\u0432\u043e\u0440\u0438\u0442\u044c \u044d\u0442\u043e \u0432\u0441\u0435, \u0442\u043e\u0436\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0432\u0440\u0435\u043c\u044f... \u0438 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u044d\u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e.","title":"Task 1"},{"location":"lab2/task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. naive from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import re def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') conn = psycopg2.connect(\"dbname=recipes user=postgres password=12345678 host=localhost\") curs = conn.cursor() recipe_blocks = soup.find_all('div', class_='emotion-etyz2y') for block in recipe_blocks: try: title = block.find('span', class_=\"emotion-1bs2jj2\").text ingredients_text = block.find('button', class_=\"emotion-d6nx0p\").text servings_text = block.find('span', class_=\"emotion-tqfyce\").text[0] cook_time = block.find('span', class_=\"emotion-14gsni6\").text author = block.find('span', class_=\"emotion-14tqfr\").text.replace(\"\u0410\u0432\u0442\u043e\u0440:\", \"\").strip() servings = int(re.search(r'\\d+', servings_text).group()) ingredients = int(re.search(r'\\d+', ingredients_text).group()) curs.execute(\"INSERT INTO titles (url, title, ingredients, servings, cook_time, author) VALUES (%s, %s, %s, %s, %s, %s)\", (url, title, ingredients, servings, cook_time, author)) conn.commit() # print(f\"Saved: {title} | Ingredients: {ingredients} | Servings: {servings} | Cook time: {cook_time}\") except AttributeError as e: print(f\"Failed to parse block: {e}\") curs.close() conn.close() if __name__ == \"__main__\": urls = [ 'https://eda.ru/recepty/zavtraki', 'https://eda.ru/recepty/osnovnye-blyuda', 'https://eda.ru/recepty/sousy-marinady', 'https://eda.ru/recepty/zagotovki', 'https://eda.ru/recepty/bulony', 'https://eda.ru/recepty/pasta-picca', 'https://eda.ru/recepty/supy', 'https://eda.ru/recepty/zakuski', 'https://eda.ru/recepty/rizotto', 'https://eda.ru/recepty/sendvichi', 'https://eda.ru/recepty/napitki', 'https://eda.ru/recepty/salaty', 'https://eda.ru/recepty/vypechka-deserty', ] start_time = time.time() for url in urls: parse_and_save(url) end_time = time.time() execution_time = end_time - start_time print(f\"Threading execution time: {execution_time:.4f} seconds\") threading from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import re def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') conn = psycopg2.connect(\"dbname=recipes user=postgres password=12345678 host=localhost\") curs = conn.cursor() recipe_blocks = soup.find_all('div', class_='emotion-etyz2y') for block in recipe_blocks: try: title = block.find('span', class_=\"emotion-1bs2jj2\").text ingredients_text = block.find('button', class_=\"emotion-d6nx0p\").text servings_text = block.find('span', class_=\"emotion-tqfyce\").text[0] cook_time = block.find('span', class_=\"emotion-14gsni6\").text author = block.find('span', class_=\"emotion-14tqfr\").text.replace(\"\u0410\u0432\u0442\u043e\u0440:\", \"\").strip() servings = int(re.search(r'\\d+', servings_text).group()) ingredients = int(re.search(r'\\d+', ingredients_text).group()) curs.execute(\"INSERT INTO titles (url, title, ingredients, servings, cook_time, author) VALUES (%s, %s, %s, %s, %s, %s)\", (url, title, ingredients, servings, cook_time, author)) conn.commit() # print(f\"Saved: {title} | Ingredients: {ingredients} | Servings: {servings} | Cook time: {cook_time}\") except AttributeError as e: print(f\"Failed to parse block: {e}\") curs.close() conn.close() def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": urls = [ 'https://eda.ru/recepty/zavtraki', 'https://eda.ru/recepty/osnovnye-blyuda', 'https://eda.ru/recepty/sousy-marinady', 'https://eda.ru/recepty/zagotovki', 'https://eda.ru/recepty/bulony', 'https://eda.ru/recepty/pasta-picca', 'https://eda.ru/recepty/supy', 'https://eda.ru/recepty/zakuski', 'https://eda.ru/recepty/rizotto', 'https://eda.ru/recepty/sendvichi', 'https://eda.ru/recepty/napitki', 'https://eda.ru/recepty/salaty', 'https://eda.ru/recepty/vypechka-deserty', ] start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time print(f\"Threading execution time: {execution_time:.4f} seconds\") multiprocessing from multiprocessing import Process import requests from bs4 import BeautifulSoup import psycopg2 import time import re def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') conn = psycopg2.connect(\"dbname=recipes user=postgres password=12345678 host=localhost\") curs = conn.cursor() recipe_blocks = soup.find_all('div', class_='emotion-etyz2y') for block in recipe_blocks: try: title = block.find('span', class_=\"emotion-1bs2jj2\").text ingredients_text = block.find('button', class_=\"emotion-d6nx0p\").text servings_text = block.find('span', class_=\"emotion-tqfyce\").text[0] cook_time = block.find('span', class_=\"emotion-14gsni6\").text author = block.find('span', class_=\"emotion-14tqfr\").text.replace(\"\u0410\u0432\u0442\u043e\u0440:\", \"\").strip() servings = int(re.search(r'\\d+', servings_text).group()) ingredients = int(re.search(r'\\d+', ingredients_text).group()) curs.execute( \"INSERT INTO titles (url, title, ingredients, servings, cook_time, author) VALUES (%s, %s, %s, %s, %s, %s)\", (url, title, ingredients, servings, cook_time, author)) # print(f\"Saved: {title} | Ingredients: {ingredients} | Servings: {servings} | Cook time: {cook_time}\") except AttributeError as e: print(f\"Failed to parse block: {e}\") curs.close() conn.close() def main(urls): processes = [] for url in urls: process = Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() if __name__ == \"__main__\": urls = [ 'https://eda.ru/recepty/zavtraki', 'https://eda.ru/recepty/osnovnye-blyuda', 'https://eda.ru/recepty/sousy-marinady', 'https://eda.ru/recepty/zagotovki', 'https://eda.ru/recepty/bulony', 'https://eda.ru/recepty/pasta-picca', 'https://eda.ru/recepty/supy', 'https://eda.ru/recepty/zakuski', 'https://eda.ru/recepty/rizotto', 'https://eda.ru/recepty/sendvichi', 'https://eda.ru/recepty/napitki', 'https://eda.ru/recepty/salaty', 'https://eda.ru/recepty/vypechka-deserty', ] start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time print(f\"Multiprocessing execution time: {execution_time:.4f} seconds\") asyncio import asyncio import time async def calculate_sum(start, end): total = sum(x * x for x in range(start, end)) return total async def main(): num_tasks = 10 range_per_task = 10 ** 6 // num_tasks times = 10 av_time = 0 for i in range(times): tasks = [calculate_sum(i * range_per_task, (i + 1) * range_per_task) for i in range(num_tasks)] start_time = time.time() results = await asyncio.gather(*tasks) total_sum = sum(results) end_time = time.time() av_time = av_time + end_time - start_time print(f\"Asyncio total sum: {total_sum}\") print(f\"Asyncio execution time: {av_time/times:.4f} seconds\") if __name__ == \"__main__\": asyncio.run(main()) \u0417\u0434\u0435\u0441\u044c \u0443\u0436\u0435 \u043d\u0435 \u0441\u0442\u0430\u043b\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u043e\u043d N-\u0440\u0430\u0437, \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0433\u043d\u0430\u043b\u0430 \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043f\u043e\u0433\u0440\u0435\u0448\u043d\u043e\u0441\u0442\u044c. Naive Threading Multiprocessing Asyncio Time 7.6552 \u00b1 3.2 1.4692 \u00b1 0.4 1.4662 \u00b1 0.3 1.3968 \u00b1 0.3 \u0422\u0443\u0442 \u0443\u0436\u0435 \u043d\u0430\u0438\u0432\u043d\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0435\u0442 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f. \u0418 \u044d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043a\u043e\u043b\u043e\u0440\u0438\u0442\u043d\u043e \u0432 \u043f\u043e\u0433\u0440\u0435\u0448\u043d\u043e\u0441\u0442\u0438: \u0435\u0441\u043b\u0438 \u0443 async, multiprocessing \u0438 threading \u0440\u0435\u0447\u044c \u0438\u0434\u0435\u0442 \u043f\u0440\u043e \u0434\u0435\u0441\u044f\u0442\u044b\u0435 \u0441\u0435\u043a\u0443\u043d\u0434\u044b, \u0442\u043e \u0434\u043b\u044f \u043d\u0430\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0438\u0441\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u0436\u0435 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u0414\u043b\u044f \u043c\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0441\u0438\u043b\u044c\u043d\u043e, \u043d\u043e, \u0432\u0441\u0435 \u0436\u0435, \u043b\u0443\u0447\u0448\u0435, \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043b Asyncio. Threading (\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. * \u0412\u0441\u0435 \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u0435\u043b\u044f\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0430\u043c\u044f\u0442\u0438. * \u041f\u043e\u0442\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0438\u0437-\u0437\u0430 GIL (Global Interpreter Lock) \u0432 Python \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c Python \u043a\u043e\u0434 \u0432 \u043b\u044e\u0431\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438. * \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0432\u0432\u043e\u0434\u043e\u043c-\u0432\u044b\u0432\u043e\u0434\u043e\u043c (I/O-bound), \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0447\u0442\u0435\u043d\u0438\u0435/\u0437\u0430\u043f\u0438\u0441\u044c \u0444\u0430\u0439\u043b\u043e\u0432, \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043e\u0442 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445. \u041a\u043e\u0433\u0434\u0430 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: * \u0417\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. * \u041a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430. \u041f\u0440\u0438\u043c\u0435\u0440: \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438. Multiprocessing (\u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u041c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0430\u043c\u044f\u0442\u0438. * \u041d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d GIL, \u0442\u0430\u043a \u043a\u0430\u043a \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e. * \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u043c\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f\u043c\u0438 (CPU-bound). \u041a\u043e\u0433\u0434\u0430 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: * \u0417\u0430\u0434\u0430\u0447\u0438, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. * \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u0443\u0447\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u041f\u0440\u0438\u043c\u0435\u0440: \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. Async (\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: * \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e, \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. * \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 event loop (\u0446\u0438\u043a\u043b \u0441\u043e\u0431\u044b\u0442\u0438\u0439) \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. * \u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439, \u0433\u0434\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 \u043d\u0435\u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u0430. \u041a\u043e\u0433\u0434\u0430 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: * \u0421\u0435\u0442\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438. * \u041a\u043e\u0433\u0434\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440: \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u044b, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Threading \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u0437-\u0437\u0430 GIL, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 CPU-bound. \u041d\u043e \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b) \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. Multiprocessing \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d GIL, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0447\u0435\u043c threading. \u041e\u0434\u043d\u0430\u043a\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0447\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. Async \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 I/O-bound \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. \u0412\u044b\u0432\u043e\u0434\u044b \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c threading, \u0435\u0441\u043b\u0438 \u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u0447 \u043d\u0430 \u0432\u0432\u043e\u0434-\u0432\u044b\u0432\u043e\u0434 => \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u043a\u043e\u0434 \u0437\u0430 \u0441\u0447\u0435\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing, \u0435\u0441\u043b\u0438 \u043a\u0443\u0447\u0430 \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439, \u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0434\u043e\u043b\u0435\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f GIL. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c async, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c I/O-bound \u0437\u0430\u0434\u0430\u0447 \u0438 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438.","title":"Task 2"}]}