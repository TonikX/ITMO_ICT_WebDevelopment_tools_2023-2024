import sqlmodel
"""smt

Revision ID: 1e5212ded2de
Revises: 
Create Date: 2024-03-08 19:02:45.133319

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1e5212ded2de'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('firstName', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lastName', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('middleName', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('hashedPassword', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transport',
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('seats', sa.Integer(), nullable=False),
    sa.Column('govNumber', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('travel',
    sa.Column('sourceCity', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('destinationCity', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('startDate', sa.DateTime(), nullable=False),
    sa.Column('leader_id', sa.Integer(), nullable=False),
    sa.Column('transport_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['leader_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['transport_id'], ['transport.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('travelpath',
    sa.Column('travel_id', sa.Integer(), nullable=False),
    sa.Column('pathPoint', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pointNumInPath', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['travel_id'], ['travel.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('traveluserslink',
    sa.Column('travel_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('joinDate', sa.DateTime(), nullable=False),
    sa.Column('state', sa.Enum('awaiting', 'approve', 'reject', name='states'), nullable=False),
    sa.ForeignKeyConstraint(['travel_id'], ['travel.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('travel_id', 'user_id', 'id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('traveluserslink')
    op.drop_table('travelpath')
    op.drop_table('travel')
    op.drop_table('transport')
    op.drop_table('user')
    # ### end Alembic commands ###
