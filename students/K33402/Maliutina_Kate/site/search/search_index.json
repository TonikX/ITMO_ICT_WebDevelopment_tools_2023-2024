{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0422\u0443\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0435\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0441 \u043b\u0438\u0442\u043a\u043e\u0434\u043e\u043c.","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"#_1","text":"\u0422\u0443\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0435\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0441 \u043b\u0438\u0442\u043a\u043e\u0434\u043e\u043c.","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"lab1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u043c \u0438 \u0443\u0447\u0435\u0442\u043e\u043c \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0438 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0447\u0438\u0435. routers/customers.py from typing import List from fastapi import APIRouter, Depends, HTTPException from db import get_session from models.customers import Customer, CustomerCategory customerRouter = APIRouter(prefix=\"\", tags=[\"customer\"]) # \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 swagger @customerRouter.get(\"/customers/\", response_model=list[CustomerCategory]) async def get_customers(session=Depends(get_session)) -> List[Customer]: customers = session.query(Customer).all() return customers @customerRouter.get(\"/customers/{username_id}\", response_model=CustomerCategory) async def get_customer(username_id: int, session=Depends(get_session)) -> Customer: customer = session.get(Customer, username_id) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u043f\u043e id \u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c. \u0415\u0441\u043b\u0438 \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441 \u0442\u0430\u043a\u0438\u043c id, \u0432\u0435\u0440\u043d\u0443\u0442\u0441\u044f \u0432\u0441\u0435 return customer @customerRouter.post(\"/customers/\") async def create_customer(customer: Customer, session=Depends(get_session)): customer = Customer.validate(customer) customer.id = None session.add(customer) session.commit() session.refresh(customer) return customer @customerRouter.patch(\"/customers/{username_id}\") async def update_customer(customer: Customer, username_id: int, session=Depends(get_session)): customer = Customer.validate(customer) customer_from_db = session.query(Customer).filter_by(id=username_id).first() if customer_from_db is None: # \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c id \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 raise HTTPException(status_code=404, detail=\"No such customer\") customer_data = customer.model_dump(exclude_unset=True) for key, value in customer_data.items(): if value is None: continue setattr(customer_from_db, key, value) session.add(customer_from_db) session.commit() session.refresh(customer_from_db) return customer_from_db @customerRouter.delete(\"/customers/{username_id}\") async def delete_customer(username_id: int, session=Depends(get_session)): session.query(Customer).filter_by(id=username_id).delete() session.commit() return \"Deleted\" models/customers.py from typing import Optional from sqlmodel import SQLModel, Field, Relationship from models.categories import Category class User(SQLModel): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e SQLModel \u0431\u0435\u0437 \u0444\u043b\u0430\u0433\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b username: str = Field(unique=True, index=True, nullable=False) # \u043f\u043e\u043b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0435\u0435 null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u0438\u043d\u0434\u0435\u043a\u0441 password: str = Field(nullable=False) favourite_category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\") # \u043e\u0434\u0438\u043d-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a category.id class Customer(User, table=True): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u043b\u0430\u0433 \u0442\u0430\u0431\u043b\u0438\u0446\u044b - \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043f\u043e\u043b\u044f \u0438 \u043f\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f id: Optional[int] = Field(default=None, primary_key=True) # \u043f\u043e\u043b\u0435 \u0441 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c balance: float = Field(default=0.0, nullable=False) favourite_category: Optional[Category] = Relationship(back_populates=\"favourite_category\") # \u043e\u0434\u0438\u043d-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c, \u043e\u0434\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u043d\u0443 \u043b\u044e\u0431\u0438\u043c\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e, \u043d\u043e \u043e\u0434\u043d\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043b\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 class CustomerCategory(User): # \u043a\u043b\u0430\u0441\u0441 \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a id favourite_category: Optional[Category] = None db.py from sqlmodel import SQLModel, Session, create_engine from dotenv import load_dotenv import os load_dotenv('.env') # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u044b (\u044d\u043d\u0432\u044b) \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 .env db_url = os.getenv('DB_ADMIN') # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c DB_ADMIN engine = create_engine(db_url, echo=True) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \"\u0434\u0432\u0438\u0436\u043a\u0430 \u0411\u0414\" - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u043e \u0432\u0441\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 # echo=True \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u043c\u044b\u0445 SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 def init_db(): SQLModel.metadata.create_all(engine) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0447\u0435\u043a \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u043f\u043e\u043c\u0435\u0442\u043a\u0430 table=True) def get_session(): with Session(engine) as session: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0434\u0432\u0438\u0436\u043a\u0430 yield session # \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 (\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0441\u044f \u0438 \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438) main.py from fastapi import FastAPI from db import * from routers import customers, categories, operations, transactions app = FastAPI() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 app.include_router(customers.customerRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 app.include_router(categories.categoryRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 app.include_router(operations.operationRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 app.include_router(transactions.transactionRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 @app.on_event(\"startup\") # \u043f\u0440\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f def on_startup(): init_db() # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 db.py migrations/env.py import os from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context from dotenv import load_dotenv from sqlmodel import SQLModel from models import * # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. if config.config_file_name is not None: fileConfig(config.config_file_name) load_dotenv('.env') # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u044b (\u044d\u043d\u0432\u044b) db_url = os.getenv('DB_ADMIN') # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 config.set_main_option('sqlalchemy.url', db_url) # \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432 \u043a\u043e\u043d\u0444\u0438\u0433 \u043e\u043f\u0446\u0438\u044e sqlalchemy.url \u0440\u0430\u0432\u043d\u044b\u0439 \u043d\u0430\u0448\u0435\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u044d\u043d\u0432 \u0444\u0430\u0439\u043b\u0430 # \u043f\u043e \u044d\u0442\u043e\u0439 \u0434\u043e\u043a\u0435 https://alembic.sqlalchemy.org/en/latest/api/config.html # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = SQLModel.metadata # \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u0430\u0434\u0430\u0442\u0443 \u0441 \u043d\u0430\u0448\u0435\u0439 \u0411\u0414 # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) with connectable.connect() as connection: context.configure( connection=connection, target_metadata=target_metadata ) with context.begin_transaction(): context.run_migrations() if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online() Screenshots","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/#_1","text":"\u0411\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u043c \u0438 \u0443\u0447\u0435\u0442\u043e\u043c \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432. \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0438 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0447\u0438\u0435.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lab1/#routerscustomerspy","text":"from typing import List from fastapi import APIRouter, Depends, HTTPException from db import get_session from models.customers import Customer, CustomerCategory customerRouter = APIRouter(prefix=\"\", tags=[\"customer\"]) # \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 swagger @customerRouter.get(\"/customers/\", response_model=list[CustomerCategory]) async def get_customers(session=Depends(get_session)) -> List[Customer]: customers = session.query(Customer).all() return customers @customerRouter.get(\"/customers/{username_id}\", response_model=CustomerCategory) async def get_customer(username_id: int, session=Depends(get_session)) -> Customer: customer = session.get(Customer, username_id) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u043f\u043e id \u0438 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c. \u0415\u0441\u043b\u0438 \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0441 \u0442\u0430\u043a\u0438\u043c id, \u0432\u0435\u0440\u043d\u0443\u0442\u0441\u044f \u0432\u0441\u0435 return customer @customerRouter.post(\"/customers/\") async def create_customer(customer: Customer, session=Depends(get_session)): customer = Customer.validate(customer) customer.id = None session.add(customer) session.commit() session.refresh(customer) return customer @customerRouter.patch(\"/customers/{username_id}\") async def update_customer(customer: Customer, username_id: int, session=Depends(get_session)): customer = Customer.validate(customer) customer_from_db = session.query(Customer).filter_by(id=username_id).first() if customer_from_db is None: # \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c id \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 raise HTTPException(status_code=404, detail=\"No such customer\") customer_data = customer.model_dump(exclude_unset=True) for key, value in customer_data.items(): if value is None: continue setattr(customer_from_db, key, value) session.add(customer_from_db) session.commit() session.refresh(customer_from_db) return customer_from_db @customerRouter.delete(\"/customers/{username_id}\") async def delete_customer(username_id: int, session=Depends(get_session)): session.query(Customer).filter_by(id=username_id).delete() session.commit() return \"Deleted\"","title":"routers/customers.py"},{"location":"lab1/#modelscustomerspy","text":"from typing import Optional from sqlmodel import SQLModel, Field, Relationship from models.categories import Category class User(SQLModel): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e SQLModel \u0431\u0435\u0437 \u0444\u043b\u0430\u0433\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u044b username: str = Field(unique=True, index=True, nullable=False) # \u043f\u043e\u043b\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0435\u0435 null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u0438\u043d\u0434\u0435\u043a\u0441 password: str = Field(nullable=False) favourite_category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\") # \u043e\u0434\u0438\u043d-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u043a category.id class Customer(User, table=True): # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u043b\u0430\u0433 \u0442\u0430\u0431\u043b\u0438\u0446\u044b - \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u043f\u043e\u043b\u044f \u0438 \u043f\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f id: Optional[int] = Field(default=None, primary_key=True) # \u043f\u043e\u043b\u0435 \u0441 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c balance: float = Field(default=0.0, nullable=False) favourite_category: Optional[Category] = Relationship(back_populates=\"favourite_category\") # \u043e\u0434\u0438\u043d-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c, \u043e\u0434\u0438\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u043d\u0443 \u043b\u044e\u0431\u0438\u043c\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e, \u043d\u043e \u043e\u0434\u043d\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043b\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 class CustomerCategory(User): # \u043a\u043b\u0430\u0441\u0441 \u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a id favourite_category: Optional[Category] = None","title":"models/customers.py"},{"location":"lab1/#dbpy","text":"from sqlmodel import SQLModel, Session, create_engine from dotenv import load_dotenv import os load_dotenv('.env') # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u044b (\u044d\u043d\u0432\u044b) \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 .env db_url = os.getenv('DB_ADMIN') # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441 \u043a\u043b\u044e\u0447\u043e\u043c DB_ADMIN engine = create_engine(db_url, echo=True) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \"\u0434\u0432\u0438\u0436\u043a\u0430 \u0411\u0414\" - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0441\u043e \u0432\u0441\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 # echo=True \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u043c\u044b\u0445 SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 def init_db(): SQLModel.metadata.create_all(engine) # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043b\u0438\u0447\u0435\u043a \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 (\u043f\u043e\u043c\u0435\u0442\u043a\u0430 table=True) def get_session(): with Session(engine) as session: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0434\u0432\u0438\u0436\u043a\u0430 yield session # \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 - \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043b\u0435\u0442\u0443 (\u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0441\u044f \u0438 \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438)","title":"db.py"},{"location":"lab1/#mainpy","text":"from fastapi import FastAPI from db import * from routers import customers, categories, operations, transactions app = FastAPI() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 app.include_router(customers.customerRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 app.include_router(categories.categoryRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 app.include_router(operations.operationRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 app.include_router(transactions.transactionRouter) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u043e\u0443\u0442\u0435\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 @app.on_event(\"startup\") # \u043f\u0440\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f def on_startup(): init_db() # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 db.py","title":"main.py"},{"location":"lab1/#migrationsenvpy","text":"import os from logging.config import fileConfig from sqlalchemy import engine_from_config from sqlalchemy import pool from alembic import context from dotenv import load_dotenv from sqlmodel import SQLModel from models import * # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. if config.config_file_name is not None: fileConfig(config.config_file_name) load_dotenv('.env') # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u044b (\u044d\u043d\u0432\u044b) db_url = os.getenv('DB_ADMIN') # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 config.set_main_option('sqlalchemy.url', db_url) # \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432 \u043a\u043e\u043d\u0444\u0438\u0433 \u043e\u043f\u0446\u0438\u044e sqlalchemy.url \u0440\u0430\u0432\u043d\u044b\u0439 \u043d\u0430\u0448\u0435\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u044d\u043d\u0432 \u0444\u0430\u0439\u043b\u0430 # \u043f\u043e \u044d\u0442\u043e\u0439 \u0434\u043e\u043a\u0435 https://alembic.sqlalchemy.org/en/latest/api/config.html # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = SQLModel.metadata # \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u0430\u0434\u0430\u0442\u0443 \u0441 \u043d\u0430\u0448\u0435\u0439 \u0411\u0414 # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) with connectable.connect() as connection: context.configure( connection=connection, target_metadata=target_metadata ) with context.begin_transaction(): context.run_migrations() if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online()","title":"migrations/env.py"},{"location":"lab1/#screenshots","text":"","title":"Screenshots"},{"location":"leetcode/","text":"6 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0437\u0430 6 \u043d\u0435\u0434\u0435\u043b\u044c \u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 3. class Solution: def lengthOfLongestSubstring(self, s: str) -> int: left = max_length = 0 char_set = set() for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length 5. class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_str = s[0] for i in range(len(s) - 1): odd = expand_from_center(i, i) even = expand_from_center(i, i + 1) if len(odd) > len(max_str): max_str = odd if len(even) > len(max_str): max_str = even return max_str 15. class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: res = [] nums.sort() for i in range(len(nums)): if i > 0 and nums[i] == nums[i-1]: continue j = i + 1 k = len(nums) - 1 while j < k: total = nums[i] + nums[j] + nums[k] if total > 0: k -= 1 elif total < 0: j += 1 else: res.append([nums[i], nums[j], nums[k]]) j += 1 while nums[j] == nums[j-1] and j < k: j += 1 return res 49. class Solution: def groupAnagrams(self, strs): anagram_map = defaultdict(list) for word in strs: sorted_word = ''.join(sorted(word)) anagram_map[sorted_word].append(word) return list(anagram_map.values()) 73. class Solution: def setZeroes(self, matrix: List[List[int]]) -> None: n, m = len(matrix), len(matrix[0]) row = [0] * n col = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 0: row[i] = 1 col[j] = 1 for i in range(n): for j in range(m): if row[i] or col[j]: matrix[i][j] = 0 334. class Solution: def increasingTriplet(self, nums: List[int]) -> bool: if len(nums) < 2: return False min_arr = [] for num in nums: if min_arr and num > min_arr[-1]: min_arr.append(min_arr[-1]) else: min_arr.append(num) max_arr = [] for num in nums[::-1]: if max_arr and num < max_arr[-1]: max_arr.append(max_arr[-1]) else: max_arr.append(num) max_arr = max_arr[::-1] for i in range(1, len(nums) - 1): if min_arr[i] < nums[i] < max_arr[i]: return True return False","title":"Leetcode"},{"location":"leetcode/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447"},{"location":"leetcode/#3","text":"class Solution: def lengthOfLongestSubstring(self, s: str) -> int: left = max_length = 0 char_set = set() for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length","title":"3."},{"location":"leetcode/#5","text":"class Solution: def longestPalindrome(self, s: str) -> str: if len(s) <= 1: return s def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_str = s[0] for i in range(len(s) - 1): odd = expand_from_center(i, i) even = expand_from_center(i, i + 1) if len(odd) > len(max_str): max_str = odd if len(even) > len(max_str): max_str = even return max_str","title":"5."},{"location":"leetcode/#15","text":"class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: res = [] nums.sort() for i in range(len(nums)): if i > 0 and nums[i] == nums[i-1]: continue j = i + 1 k = len(nums) - 1 while j < k: total = nums[i] + nums[j] + nums[k] if total > 0: k -= 1 elif total < 0: j += 1 else: res.append([nums[i], nums[j], nums[k]]) j += 1 while nums[j] == nums[j-1] and j < k: j += 1 return res","title":"15."},{"location":"leetcode/#49","text":"class Solution: def groupAnagrams(self, strs): anagram_map = defaultdict(list) for word in strs: sorted_word = ''.join(sorted(word)) anagram_map[sorted_word].append(word) return list(anagram_map.values())","title":"49."},{"location":"leetcode/#73","text":"class Solution: def setZeroes(self, matrix: List[List[int]]) -> None: n, m = len(matrix), len(matrix[0]) row = [0] * n col = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 0: row[i] = 1 col[j] = 1 for i in range(n): for j in range(m): if row[i] or col[j]: matrix[i][j] = 0","title":"73."},{"location":"leetcode/#334","text":"class Solution: def increasingTriplet(self, nums: List[int]) -> bool: if len(nums) < 2: return False min_arr = [] for num in nums: if min_arr and num > min_arr[-1]: min_arr.append(min_arr[-1]) else: min_arr.append(num) max_arr = [] for num in nums[::-1]: if max_arr and num < max_arr[-1]: max_arr.append(max_arr[-1]) else: max_arr.append(num) max_arr = max_arr[::-1] for i in range(1, len(nums) - 1): if min_arr[i] < nums[i] < max_arr[i]: return True return False","title":"334."},{"location":"leetcode2/","text":"\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 2. Add Two Numbers class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummyHead = ListNode(0) tail = dummyHead carry = 0 while l1 is not None or l2 is not None or carry != 0: digit1 = l1.val if l1 is not None else 0 digit2 = l2.val if l2 is not None else 0 sum = digit1 + digit2 + carry digit = sum % 10 carry = sum // 10 newNode = ListNode(digit) tail.next = newNode tail = tail.next l1 = l1.next if l1 is not None else None l2 = l2.next if l2 is not None else None result = dummyHead.next dummyHead.next = None return result 38. Count and Say class Solution: def countAndSay(self, n: int) -> str: say = \"1\" for i in range(2, n + 1): temp = \"\" num = say[0] count = 1 for i in range(1, len(say)): curr_num = say[i] if num == curr_num: count += 1 else: temp += str(count) + str(num) num = curr_num count = 1 temp += str(count) + str(num) say = temp return say 328. Odd Even Linked List class Solution: def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]: if not head: return None odd = head evenHead = even = head.next while even and even.next: odd.next = odd.next.next odd = odd.next even.next = even.next.next even = even.next odd.next = evenHead return head","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447"},{"location":"leetcode2/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447"},{"location":"leetcode2/#2-add-two-numbers","text":"class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummyHead = ListNode(0) tail = dummyHead carry = 0 while l1 is not None or l2 is not None or carry != 0: digit1 = l1.val if l1 is not None else 0 digit2 = l2.val if l2 is not None else 0 sum = digit1 + digit2 + carry digit = sum % 10 carry = sum // 10 newNode = ListNode(digit) tail.next = newNode tail = tail.next l1 = l1.next if l1 is not None else None l2 = l2.next if l2 is not None else None result = dummyHead.next dummyHead.next = None return result","title":"2. Add Two Numbers"},{"location":"leetcode2/#38-count-and-say","text":"class Solution: def countAndSay(self, n: int) -> str: say = \"1\" for i in range(2, n + 1): temp = \"\" num = say[0] count = 1 for i in range(1, len(say)): curr_num = say[i] if num == curr_num: count += 1 else: temp += str(count) + str(num) num = curr_num count = 1 temp += str(count) + str(num) say = temp return say","title":"38. Count and Say"},{"location":"leetcode2/#328-odd-even-linked-list","text":"class Solution: def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]: if not head: return None odd = head evenHead = even = head.next while even and even.next: odd.next = odd.next.next odd = odd.next even.next = even.next.next even = even.next odd.next = evenHead return head","title":"328. Odd Even Linked List"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0438 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0447\u0438\u0435. task1/async1.py import asyncio from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 async def calculate_sum(start, end): s = sum(range(start, end + 1)) return s async def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f task_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043a\u043e\u0440\u0443\u0442\u0438\u043d numbers_per_task = 1_000_000 // task_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b tasks = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for i in range(task_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b start = i * numbers_per_task + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_task - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 tasks.append(calculate_sum(start, end)) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 results = await asyncio.gather(*tasks) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e total_sum = sum(results) # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0442\u0435\u0445 5 \u0441\u0443\u043c\u043c end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": asyncio.run(main()) task1/multiprocessing1.py from multiprocessing import Process, Queue from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 def calculate_sum(start, end, queue): # queue - \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u0443\u0434\u0430 \u043c\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b queue.put(sum(range(start, end + 1))) def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f queue = Queue() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 process_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 numbers_per_process = 1_000_000 // process_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b processes = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for i in range(process_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b start = i * numbers_per_process + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_process - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 p = Process(target=calculate_sum, args=(start, end, queue)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b processes.append(p) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0436\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f p.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for p in processes: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 p.join() # \"\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u044f\u0435\u043c\u0441\u044f\" \u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f total_sum = 0 # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 while not queue.empty(): # \u043f\u043e\u043a\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435 \u043f\u0443\u0441\u0442\u0430 \u0438 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f total_sum += queue.get() # \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0441 \u043e\u0431\u0449\u0435\u0439 \u0441\u0443\u043c\u043c\u043e\u0439 end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": main() task1/threading1.py import threading from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 def calculate_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0432 result \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e 5 \u0441\u0443\u043c\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f thread_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 numbers_per_thread = 1_000_000 // thread_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b threads = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f results = [0] * thread_count # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0443\u043c\u043c for i in range(thread_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u0438 start = i * numbers_per_thread + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_thread - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 t = threading.Thread(target=calculate_sum, args=(start, end, results)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b threads.append(t) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0432 \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0436\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f t.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for t in threads: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 t.join() # \"\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u044f\u0435\u043c\u0441\u044f\" \u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f total_sum = sum(results) # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0442\u0435\u0445 5 \u0441\u0443\u043c\u043c end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": main() task2/async2.py import asyncio import time import aiohttp from bs4 import BeautifulSoup from connection import DBConn from data import URLs, number_of_threads async def parse_and_save_async(url, db_conn): try: async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session: # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async with session.get(url) as response: # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u043a\u043b\u0438\u0435\u043d\u0442\u0430-\u0441\u0435\u0441\u0441\u0438\u0438 page = await response.text() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0442\u0435\u043a\u0441\u0442\u043e\u043c soup = BeautifulSoup(page, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f async def process_url_list_async(url_list, conn): tasks = [] # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for url in url_list: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c task = asyncio.create_task(parse_and_save_async(url, conn)) # \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b tasks.append(task) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 await asyncio.gather(*tasks) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e async def main(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0442\u043e\u043a\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 await asyncio.gather( *(process_url_list_async(chunk, db_conn) for chunk in url_chunks)) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e db_conn.close() # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f asyncio.run(main()) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f async: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f task2/multiprocessing2.py import multiprocessing import time import requests from bs4 import BeautifulSoup from connection import DBConn from data import URLs, number_of_threads def parse_and_save_multiprocessing(url): db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 try: page = requests.get(url) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 soup = BeautifulSoup(page.text, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f finally: # \u0432 \u043a\u043e\u043d\u0446\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 db_conn.close() def process_url_list_multiprocessing(url_list): for url in url_list: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0441\u044b\u043b\u043a\u0443 parse_and_save_multiprocessing(url) # \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def main_multiprocessing(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 processes = [] # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 for chunk in url_chunks: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c process = multiprocessing.Process(target=process_url_list_multiprocessing, args=(chunk,)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0447\u0435\u0440\u0435\u0437 tuple processes.append(process) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f process.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 for process in processes: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 process.join() # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f main_multiprocessing() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f multiprocessing: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f task2/threading2.py import threading import time from connection import DBConn import requests from bs4 import BeautifulSoup from data import URLs, number_of_threads def parse_and_save_threading(url, db_conn): try: # \u043f\u0440\u043e\u0431\u0443\u0435\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0430\u0441\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 page = requests.get(url) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 soup = BeautifulSoup(page.text, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f def process_url_list_threading(url_list, db_conn): for url in url_list: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0441\u044b\u043b\u043a\u0443 parse_and_save_threading(url, db_conn) # \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def main_threading(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 threads = [] # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for chunk in url_chunks: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c thread = threading.Thread(target=process_url_list_threading, args=(chunk, db_conn)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b threads.append(thread) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for thread in threads: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 thread.join() # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f db_conn.close() # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f main_threading() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f threading: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f task2/data.py # \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u0441\u044b\u043b\u043e\u043a, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 URLs = [ 'https://www.bookvoed.ru/catalog/knigi-s-avtografom-4435', 'https://www.bookvoed.ru/catalog/detskie-knigi-1159', 'https://www.bookvoed.ru/catalog/samoobrazovanie-i-razvitie-4560', 'https://www.bookvoed.ru/catalog/khobbi-i-dosug-4056', 'https://www.bookvoed.ru/catalog/estestvennye-nauki-1347', 'https://www.bookvoed.ru/catalog/religiya-1437', ] # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u0435\u0434\u0438\u043d\u0438\u0446 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f number_of_threads = 3 task2/connection.py import psycopg2 # \u041a\u043b\u0430\u0441\u0441 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class DBConn: # SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043a\u043d\u0438\u0433, %s \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b # public - \u0441\u0445\u0435\u043c\u0430 \u0432 \u0431\u0434, books - \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0445\u0435\u043c\u044b INSERT_SQL = \"\"\"INSERT INTO public.books(title, price) VALUES (%s, %s)\"\"\" # \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f/\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 - \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 # (\u043d\u0435 \u043d\u0443\u0436\u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0441\u0430\u043c \u043a\u043b\u0430\u0441\u0441 'self') @staticmethod def connect_to_database(): conn = psycopg2.connect( dbname=\"web_books_db\", # \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u0434 user=\"ekaterinamalyutina\", # \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password=\"postgres\", # \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f host=\"localhost\", # \u0445\u043e\u0441\u0442 port=\"5432\" # \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u0442 ) # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u044d\u0442\u043e\u0439 \u0431\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u044d\u0442\u0443 \u0441\u0432\u044f\u0437\u044c return conn","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lr2/#_1","text":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438 \u0438 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0447\u0438\u0435.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"lr2/#task1async1py","text":"import asyncio from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 async def calculate_sum(start, end): s = sum(range(start, end + 1)) return s async def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f task_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043a\u043e\u0440\u0443\u0442\u0438\u043d numbers_per_task = 1_000_000 // task_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b tasks = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for i in range(task_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b start = i * numbers_per_task + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_task - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 tasks.append(calculate_sum(start, end)) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 results = await asyncio.gather(*tasks) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e total_sum = sum(results) # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0442\u0435\u0445 5 \u0441\u0443\u043c\u043c end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": asyncio.run(main())","title":"task1/async1.py"},{"location":"lr2/#task1multiprocessing1py","text":"from multiprocessing import Process, Queue from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 def calculate_sum(start, end, queue): # queue - \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u0443\u0434\u0430 \u043c\u044b \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b queue.put(sum(range(start, end + 1))) def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f queue = Queue() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 process_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 numbers_per_process = 1_000_000 // process_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b processes = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for i in range(process_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b start = i * numbers_per_process + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_process - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 p = Process(target=calculate_sum, args=(start, end, queue)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b processes.append(p) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0436\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f p.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for p in processes: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 p.join() # \"\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u044f\u0435\u043c\u0441\u044f\" \u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f total_sum = 0 # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 while not queue.empty(): # \u043f\u043e\u043a\u0430 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435 \u043f\u0443\u0441\u0442\u0430 \u0438 \u0432 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f total_sum += queue.get() # \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0441 \u043e\u0431\u0449\u0435\u0439 \u0441\u0443\u043c\u043c\u043e\u0439 end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": main()","title":"task1/multiprocessing1.py"},{"location":"lr2/#task1threading1py","text":"import threading from time import time # \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0441\u0443\u043c\u043c\u044b \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u043e\u0437\u043e\u043d\u0435 def calculate_sum(start, end, result, index): result[index] = sum(range(start, end + 1)) # \u0432 result \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e 5 \u0441\u0443\u043c\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e def main(): start_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f thread_count = 5 # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432 5 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 numbers_per_thread = 1_000_000 // thread_count # \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0430 200_000 \u0447\u0438\u0441\u0435\u043b threads = list() # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f results = [0] * thread_count # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0443\u043c\u043c for i in range(thread_count): # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u0438 start = i * numbers_per_thread + 1 # \u043f\u0435\u0440\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 end = start + numbers_per_thread - 1 # \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 t = threading.Thread(target=calculate_sum, args=(start, end, results)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b threads.append(t) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0432 \u043d\u0430\u0448 \u0441\u043f\u0438\u0441\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0436\u0434\u0430\u0442\u044c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f t.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for t in threads: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 t.join() # \"\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u044f\u0435\u043c\u0441\u044f\" \u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f total_sum = sum(results) # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0442\u0435\u0445 5 \u0441\u0443\u043c\u043c end_time = time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0421\u0443\u043c\u043c\u0430: {total_sum}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0443\u043c\u043c\u0443 print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time}\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f if __name__ == \"__main__\": main()","title":"task1/threading1.py"},{"location":"lr2/#task2async2py","text":"import asyncio import time import aiohttp from bs4 import BeautifulSoup from connection import DBConn from data import URLs, number_of_threads async def parse_and_save_async(url, db_conn): try: async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session: # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0441\u0441\u0438\u044e \u0434\u043b\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 async with session.get(url) as response: # \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u043a\u043b\u0438\u0435\u043d\u0442\u0430-\u0441\u0435\u0441\u0441\u0438\u0438 page = await response.text() # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0442\u0435\u043a\u0441\u0442\u043e\u043c soup = BeautifulSoup(page, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f async def process_url_list_async(url_list, conn): tasks = [] # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0443\u0442\u0438\u043d, \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u043e\u043d\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f for url in url_list: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c task = asyncio.create_task(parse_and_save_async(url, conn)) # \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b tasks.append(task) # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u043f\u0438\u0441\u043a\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 await asyncio.gather(*tasks) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e async def main(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0442\u043e\u043a\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 await asyncio.gather( *(process_url_list_async(chunk, db_conn) for chunk in url_chunks)) # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e db_conn.close() # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f asyncio.run(main()) # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f async: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task2/async2.py"},{"location":"lr2/#task2multiprocessing2py","text":"import multiprocessing import time import requests from bs4 import BeautifulSoup from connection import DBConn from data import URLs, number_of_threads def parse_and_save_multiprocessing(url): db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 try: page = requests.get(url) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 soup = BeautifulSoup(page.text, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f finally: # \u0432 \u043a\u043e\u043d\u0446\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 db_conn.close() def process_url_list_multiprocessing(url_list): for url in url_list: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0441\u044b\u043b\u043a\u0443 parse_and_save_multiprocessing(url) # \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def main_multiprocessing(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 processes = [] # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 for chunk in url_chunks: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c process = multiprocessing.Process(target=process_url_list_multiprocessing, args=(chunk,)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0447\u0435\u0440\u0435\u0437 tuple processes.append(process) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f process.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 for process in processes: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 process.join() # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f main_multiprocessing() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f multiprocessing: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task2/multiprocessing2.py"},{"location":"lr2/#task2threading2py","text":"import threading import time from connection import DBConn import requests from bs4 import BeautifulSoup from data import URLs, number_of_threads def parse_and_save_threading(url, db_conn): try: # \u043f\u0440\u043e\u0431\u0443\u0435\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0430\u0441\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 page = requests.get(url) # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 soup = BeautifulSoup(page.text, 'html.parser') # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440 books = soup.find_all('div', class_='product-card') # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 for book in books: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0432 \u0446\u0438\u043a\u043b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043d\u0438\u0433\u0430\u043c title = book.attrs['data-product-name'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 price = book.attrs['data-product-price-discounted'] # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0446\u0435\u043d\u0443 \u043a\u043d\u0438\u0433\u0438 with db_conn.cursor() as cursor: # \u0447\u0435\u0440\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 cursor \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 cursor.execute(DBConn.INSERT_SQL, (title, price)) # \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b db_conn.commit() # \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f except Exception as e: # \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f print(\"\u041e\u0448\u0438\u0431\u043a\u0430:\", e) # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443 db_conn.rollback() # \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f def process_url_list_threading(url_list, db_conn): for url in url_list: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0441\u044b\u043b\u043a\u0443 parse_and_save_threading(url, db_conn) # \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 def main_threading(): chunk_size = len(URLs) // number_of_threads # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430 (2) url_chunks = [URLs[i:i + chunk_size] for i in range(0, len(URLs), chunk_size)] # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0430\u043c\u0438 \u0441\u0441\u044b\u043b\u043a\u0438 db_conn = DBConn.connect_to_database() # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 threads = [] # \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u043e\u043a\u043e\u0432 for chunk in url_chunks: # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c thread = threading.Thread(target=process_url_list_threading, args=(chunk, db_conn)) # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b threads.append(thread) # \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f thread.start() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a for thread in threads: # \u0432 \u0446\u0438\u043a\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 thread.join() # \u043e\u0436\u0438\u0434\u0430\u0435\u043c \u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f db_conn.close() # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 if __name__ == '__main__': start_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f main_threading() # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 end_time = time.time() # \u0437\u0430\u0441\u0435\u043a\u0430\u0435\u043c \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f threading: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434\") # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","title":"task2/threading2.py"},{"location":"lr2/#task2datapy","text":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0441\u0441\u044b\u043b\u043e\u043a, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 URLs = [ 'https://www.bookvoed.ru/catalog/knigi-s-avtografom-4435', 'https://www.bookvoed.ru/catalog/detskie-knigi-1159', 'https://www.bookvoed.ru/catalog/samoobrazovanie-i-razvitie-4560', 'https://www.bookvoed.ru/catalog/khobbi-i-dosug-4056', 'https://www.bookvoed.ru/catalog/estestvennye-nauki-1347', 'https://www.bookvoed.ru/catalog/religiya-1437', ] # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432/\u0435\u0434\u0438\u043d\u0438\u0446 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f number_of_threads = 3","title":"task2/data.py"},{"location":"lr2/#task2connectionpy","text":"import psycopg2 # \u041a\u043b\u0430\u0441\u0441 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class DBConn: # SQL \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043a\u043d\u0438\u0433, %s \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b # public - \u0441\u0445\u0435\u043c\u0430 \u0432 \u0431\u0434, books - \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0445\u0435\u043c\u044b INSERT_SQL = \"\"\"INSERT INTO public.books(title, price) VALUES (%s, %s)\"\"\" # \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f/\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 - \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 # (\u043d\u0435 \u043d\u0443\u0436\u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0441\u0430\u043c \u043a\u043b\u0430\u0441\u0441 'self') @staticmethod def connect_to_database(): conn = psycopg2.connect( dbname=\"web_books_db\", # \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u0434 user=\"ekaterinamalyutina\", # \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password=\"postgres\", # \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f host=\"localhost\", # \u0445\u043e\u0441\u0442 port=\"5432\" # \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043f\u043e\u0440\u0442 ) # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u044d\u0442\u043e\u0439 \u0431\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u044d\u0442\u0443 \u0441\u0432\u044f\u0437\u044c return conn","title":"task2/connection.py"},{"location":"pr1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u041a\u043e\u0434 \u043a\u0430\u043a \u043d\u0430 \u0441\u0430\u0439\u0442\u0435, \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0441\u043a\u0440\u0438\u043d\u044b \u043d\u0438\u0436\u0435.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430"},{"location":"pr1/#_1","text":"\u041a\u043e\u0434 \u043a\u0430\u043a \u043d\u0430 \u0441\u0430\u0439\u0442\u0435, \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0441\u043a\u0440\u0438\u043d\u044b \u043d\u0438\u0436\u0435.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430"}]}